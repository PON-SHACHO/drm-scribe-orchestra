import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
const supabaseAnonKey = Deno.env.get('SUPABASE_ANON_KEY')!;

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    const { projectId, contentType, input, inputType, systemPrompt, userPrompt } = await req.json();
    
    const supabase = createClient(supabaseUrl, supabaseAnonKey, {
      global: { headers: { Authorization: req.headers.get('Authorization')! } }
    });

    // Get user from auth (temporary: skip auth check for now)
    // const { data: { user } } = await supabase.auth.getUser();
    // if (!user) {
    //   throw new Error('User not authenticated');
    // }

    // Use a temporary user ID for now
    const userId = 'temp-user-id';

    // Build prompts (prefer provided optimized prompts if present)
    const system = (typeof systemPrompt === 'string' && systemPrompt.trim().length > 0)
      ? systemPrompt
      : getSystemPrompt(contentType);

    const userContent = (typeof userPrompt === 'string' && userPrompt.trim().length > 0)
      ? userPrompt
      : getPromptForContentType(contentType, input, inputType);

    // Completion marker to detect the end
    const END_MARK = '<END_OF_DOCUMENT>';

    // Prepare chat messages
    const messages: Array<{ role: 'system' | 'user' | 'assistant'; content: string }> = [
      { role: 'system', content: system },
      { role: 'user', content: `${userContent}\n\n必ず文書を最後まで書き切り、完了時は最後に ${END_MARK} とだけ記載してください。` },
    ];

    let full = '';
    let finished = false;
    let iteration = 0;
    const maxIterations = 8;
    let prevLength = 0;

    while (!finished && iteration < maxIterations) {
      iteration++;
      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${openAIApiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: 'gpt-4o',
          messages,
          max_tokens: 4096,
          temperature: 0.7,
          top_p: 0.9,
          presence_penalty: 0.4,
          frequency_penalty: 0.3,
        }),
      });

      if (!response.ok) {
        const errorText = await response.text();
        console.error('OpenAI API error:', response.status, errorText);
        throw new Error(`OpenAI API error: ${response.status} - ${errorText}`);
      }

      const contentType_response = response.headers.get('content-type');
      if (!contentType_response || !contentType_response.includes('application/json')) {
        const errorText = await response.text();
        console.error('OpenAI API returned non-JSON response:', errorText);
        throw new Error(`OpenAI API returned non-JSON response: ${errorText.substring(0, 200)}`);
      }

      const data = await response.json();
      if (!data.choices || !data.choices[0] || !data.choices[0].message) {
        console.error('Unexpected OpenAI API response structure:', data);
        throw new Error('Unexpected response structure from OpenAI API');
      }

      const part: string = data.choices[0].message.content || '';
      const finishReason: string = data.choices[0].finish_reason;

      full += part;

      console.log(
        `Iteration ${iteration} for ${contentType} - length ${part.length}, finish_reason: ${finishReason}`
      );

      // Consider the entire accumulated text as well
      if (part.includes(END_MARK) || full.includes(END_MARK)) {
        finished = true;
        break;
      }

      // If we didn't get the END marker yet, always request continuation
      const grew = full.length > prevLength;
      prevLength = full.length;

      messages.push({ role: 'assistant', content: part.slice(-4000) });
      messages.push({
        role: 'user',
        content:
          `未完了です。直前の続きのみを出力してください。前文を繰り返さず、構成・番号・見出しを保って最終行まで書き切ってください。完了時は最後に ${END_MARK} を必ず付けてください。`,
      });

      // Guard against stalled loops
      if (!grew && finishReason === 'stop') {
        console.warn('No growth detected and model returned stop. Breaking to avoid infinite loop.');
        break;
      }
    }

    let generatedContent = full.replaceAll(END_MARK, '').trim();

    if (!generatedContent || generatedContent.trim().length === 0) {
      throw new Error('Generated content is empty');
    }

    console.log(
      `Generated ${contentType} for project ${projectId} - Total length: ${generatedContent.length} (iterations: ${iteration})`
    );

    return new Response(JSON.stringify({ 
      success: true, 
      content: generatedContent,
      generatedText: generatedContent
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Error in generate-content function:', error);
    return new Response(JSON.stringify({ 
      error: error.message,
      success: false 
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function getSystemPrompt(contentType: string): string {
  const basePrompt = "あなたは高反応のマーケティングコンテンツ作成の専門家です。日本語で回答してください。**出力は必ずスマホ表示に最適化してください：適度な改行（60-80文字程度で改行）、空行を効果的に使用し、読みやすい段落構成にしてください。**";
  
  switch (contentType) {
    case 'insights_analysis':
      return `あなたはいくつものDRMマーケティングを成功させてきたCMOです。日本語で回答してください。**出力は必ずスマホ表示に最適化してください：適度な改行（60-80文字程度で改行）、空行を効果的に使用し、読みやすい段落構成にしてください。**`;
    case 'plan_proposal':
      return `あなたはいくつものDRMマーケティングを成功させてきたCMOです。日本語で回答してください。**出力は必ずスマホ表示に最適化してください：適度な改行（60-80文字程度で改行）、空行を効果的に使用し、読みやすい段落構成にしてください。**`;
    case 'free_content':
      return `あなたは心理学とマーケティングに精通した最高レベルのライターです。日本語で回答してください。**出力は必ずスマホ表示に最適化してください：適度な改行（60-80文字程度で改行）、空行を効果的に使用し、読みやすい段落構成にしてください。**`;
    case 'sales_letter':
      return `あなたは神田昌典やゲイリーハルバートも驚くセールスレターの専門家です。「12ステップ構成 × 構文活用 × 教育・興味付け・ラベリング挿入」を完全に理解し、読者の感情と行動を同時に動かす長文セールスレターを作成できる、プロフェッショナルです。依頼者は、情報商材を販売する情報商材屋さんです。日本語で回答してください。**出力は必ずスマホ表示に最適化してください：適度な改行（60-80文字程度で改行）、空行を効果的に使用し、読みやすい段落構成にしてください。**`;
    case 'short_lp':
      return `${basePrompt} メール登録を促す短尺LPを作成してください。`;
    case 'education_posts':
      return `${basePrompt} SNS向け教育ポストを作成してください。独立したテーマで読みたくなる余白を残してください。`;
    case 'campaign_post':
      return `${basePrompt} SNSでの企画ポスト（告知）を作成してください。`;
    case 'long_lp':
      return `${basePrompt} スキャン読みしやすい商品販売LPを作成してください。`;
    case 'step_mails':
      return `${basePrompt} 心理的ステップに基づいたステップメールを作成してください。`;
    case 'repost_bonus':
      return `${basePrompt} 無料プレゼントから読者参加型のリポスト特典コンテンツを作成してください。`;
    case 'webinar_script':
      return `${basePrompt} 無料プレゼントを活用したウェビナー台本とスライド構成を作成してください。`;
    case 'webinar_slides':
      return `${basePrompt} ウェビナースクリプトに対応するスライド用文章を作成してください。`;
    case 'vsl_script':
      return `${basePrompt} セールスレターを元にしたVSL台本を作成してください。`;
    case 'vsl_slides':
      return `${basePrompt} VSLスクリプトに対応するスライド用文章を作成してください。`;
    default:
      return basePrompt;
  }
}

function getPromptForContentType(contentType: string, input: string, inputType: string): string {
  const inputContext = inputType === 'product_info' 
    ? `商品情報: ${input}`
    : `既存コンテンツ: ${input}`;

  switch (contentType) {
    case 'insights_analysis':
      return `
ステップ１：【ターゲットインサイトの分析】
【商品情報】または【既存コンテンツ】から、以下の情報をあなたのマーケティング視点で推定してください：

・【想定ターゲット】：  
・【潜在的なインサイト（葛藤や願望）】：  
・【リードマグネットで惹きつけたい心理ポイント】：  


▼商品情報：
${inputContext}
`;

    case 'plan_proposal':
      return `
【ステップ2：企画案の提示】
前回分析した結果に基づき、リードマグネットの企画案を5つ提案してください。
それぞれの構成：

【無料プレゼント案】: 【タイトル】（魅力的で、ベネフィットと意外性が伝わるもの）（有益情報コンテンツ）
【特典案】： 【タイトル】（チェックリスト、診断、ミニ講座、テンプレ集など）  
【企画概要】： （何を提供し、どんな体験・変化が得られるか）  
【ねらい】： （どう読者心理を動かし、バックエンドにつなげるか）  

最後に、ユーザーにこう問いかけてください：
「この中で最もあなたの世界観・価値観にフィットする番号を教えてください。その選択をもとに、リードマグネット戦略を構築していきます。」

▼商品情報：
${inputContext}
`;

    case 'free_content':
      return `あなたは心理学・行動デザイン・マーケティングのすべてに通じた一流ライターです。

以下の商品情報に基づいて、読者の心に強い"認知的揺さぶり"と"実践欲"を生む**無料プレゼントコンテンツ**を作成してください。（約5,000字）

このコンテンツは、商品を直接的に説明するものではなく、「読者の自己変革を支援することで、商品への関心・信頼を自然に生み出す」ためのリードマグネットです。

---

【目的】
- 読者の「世界の見え方」を変える
- 実行意欲を引き出す
- 読後に「もっと学びたい」「この人の教える商品が気になる」と感じる状態をつくる

---

【構成ガイド】

■ Step1：アウトライン設計（章立て＋構文設計）
- 章構成：3〜5章構成（読者の変化ステージに沿って）
　- Chapter1：気づき
　- Chapter2：再解釈
　- Chapter3：実践視点
　- Chapter4：行動喚起（任意）
- 各章に「構文」を割り当て、役割と目的を明示（PREP、PASONA、SDS、逆説、比喩、共感など）

■ Step2：執筆
- 魅力的で「絶対に読まなきゃ損」と思わせるタイトルをつける
- 章タイトル／構文名／目的を明記して執筆開始
- 構文を組み合わせながら論理と感情を両立
- 読者が「わかる」ではなく「やってみよう」と思える言語設計に

■ Step3：最後の章で自然に商品への関心を誘発
- 「もっと深く学ぶには？」「体系的に実践するには？」という問いかけからCTAへ

---

【口調】
- 少し軽めの大人っぽいトーン（読者を尊重し、距離感をつくりすぎない）
- フォーマルとカジュアルの中間
- 原則一人称（あなた → 私）

▼商品情報：
${inputContext}

---

# ナレッジ

## 構文マッピング表

### ■ 構文カテゴリ・構文名・役割

【論理・説得】

・PREP：主張と論理補強

・SDS：客観情報の構造整理

・枠組み提示：視点のセットアップ

・ロジックツリー：要素分解

【実践・手順】

・ステップ：実行フロー

・Before→After：変化を可視化

・フローチャート：分岐型手順

【感情・共感】

・AIDA：感情導線

・PASONA：問題解決への期待

・共感構文：心理的壁の緩和

・自己開示構文：距離感の短縮

・逆説構文：思い込みの突破

・物語構文：感情体験の共有

【具体化・補完】

・例示構文：イメージ補強

・比喩構文：抽象→体感変換

・Q&A構文：疑問解消

・対比構文：概念の違い提示

【動機形成・行動喚起】

・エモCTA構文：感情×行動の一撃

・決意構文：宣言と覚悟

・ストーリーCTA：感情誘導→提案

【構造補助・その他】

・マトリクス構文：二軸での整理

・検証構文：説の正誤比較

・メタ認知構文：気づきの誘発

---

### ■ 典型構造・向いている場面・読者の反応

主張→理由→例→再主張：導入・要点整理 → 納得

事実→解釈→主張：分析・比較 → 理解

フレーム→定義→活用：複雑なテーマの導入 → 抽象理解

上位→中位→下位構造：課題の分解 → 整理・納得

手順1→2→3…：How-to → 実践

課題→変化→結果：改善事例 → 想像・納得

条件→選択肢→結果：Q&A的応用 → 行動判断

注意→関心→欲求→行動：CTA前 → ワクワク・決断

Problem → Agitation → Solution → Narrow → Action：

セールス・不安喚起 → 共感・欲望

弱さ → 安心 → 小さな一歩：感情ケア → 癒やし・動機付け

昔話 → 失敗 → 学び → 今：信頼形成 → 共感・信頼

一般常識 → 実は逆 → 根拠：フック・冒頭 → 驚き・納得

起承転結／感情曲線：感情マインド系 → 没入・涙

抽象 → 例 → 一般化：難解な説明 → 想像・理解

抽象概念 → 比喩 → 解釈：感覚理解 → 共鳴・納得

Q → A → 補足：初心者フォロー → 安心感

A vs B：選択肢提示 → 判断力

感情訴求 → 行動誘導：本文の最後 → 行動促進

昔 → 今 → これから：マインド変化 → 内的燃焼

感情起伏 → 共鳴 → 問いかけ：エピソード後 → 心揺さぶり・行動

A軸 × B軸マップ：選び方・戦略設計 → 見通し

仮説 → 検証 → 結論：批判的思考 → 判断

一般視点 → 自分への投影：自己理解 → 内省

## 読者変化導線に基づく構成設計ガイド

読者変化導線に基づく構成設計ガイド

▼ 第一部：ハードナレッジ（明文化された再現可能な知識）
タイトル
構造的な読み物コンテンツ制作プロセス

目的
読者の視点と行動を変化させることを目的とした、構造的かつ実践的な読み物コンテンツを制作するための手順と設計基準を明示する。

対象読者
・読み手の行動変容を促すコンテンツを設計・執筆する制作者
・知識を単なる情報提示ではなく「納得→理解→共感→実践→振り返り」へと導く形で提供したい編集者・ライター・講師・コンサルタント

定義・前提条件
・「構文」とは、情報を読者の変化段階に合わせて効果的に伝えるための論理構成方法（PREP構文、SDS構文、逆説構文など）
・「章（Chapter）」は読者の変化ステージ（例：気づき→理解→実践→行動）に沿って分ける
・「構文マッピング表」は構文と読者変化との最適な対応関係を示す資料（別ナレッジ）
・読み物全体の文字数は5000〜10000字を想定

プロセス・手順

Step1：テーマの定義
　ユーザーからの入力をもとに、読み物全体の中心テーマを明確化する。

Step2：章構成の設計
　・3〜5章で構成する
　・各章は異なる観点・切り口を担当し、読者の変化段階に対応させる
　・章の順番は読者の認知変容ステップ（気づき→理解→行動）に沿って設計する

Step3：章ごとの構文設計
　・各章に1〜2つの構文を割り当てる
　・各構文には「内容目的（何をどう伝えるか）」を必ず明示
　・構文選定は「構文マッピング表」に基づき、読者の変化に最も効果的なものを選ぶ

Step4：構文付きアウトライン出力
　・以下の形式で章タイトルと構文内容を設計する
　　例）
　　　Chapter1：なぜ「◯◯」がうまくいかないのか？
　　　PREP構文で「◯◯がうまくいかない理由と背景」を論理的に解説
　　　逆説構文で「一見逆に見えるが本質的な視点の転換」を提示

Step5：本文執筆フェーズ
　・章ごとに以下の形式で出力する
　　　【章タイトル】
　　　【構文タイプ】
　　　【構文内容】
　　　【口調の選択】

成功パターンと失敗パターン

【成功パターン】
・章ごとの論点が明確に分かれ、読者の思考がスムーズに移行する構成
・構文が目的と内容に合っており、情報が効果的に伝わる
・アウトライン段階で口調や流れを確認してから本文に進む`;
    case 'sales_letter':
      return `【商品情報】
${inputContext}

読者の買わない理由を徹底的に消し、感情と行動を同時に動かすセールスレターを作成する

セールスレターは以下の12ステップ構成に従って出力してください。

各ステップでは、対応する構文と感情挿入技法を必ず1つ以上使用してください。出力は【Step番号｜見出し】付きで、スマホ最適な改行／口語表現の1回使用を推奨します。

# 12ステップ構成＋構文＋挿入技法

【Step1. タイトル・ヘッドコピー設計】
目的：注意喚起と即ベネフィット訴求で離脱を防ぐ
要素：ベネフィット × 数字 × 煽り
導入ワード例：「心してお読みください」「3分後、こう思うはずです──」（例とは違う文言を使ってください。）
構文：QUEST構文（問題提起→共感→解決策→証拠→行動）
挿入技法：興味付け（ズレ・数字・比較）

【Step2. 理想の未来の提示（爆撃のように）】
目的：欲求喚起と"得たい状態の映像化"
ポイント：小変化→日常変化→人生変化の三段階
構文：AIDMA構文（Desire重点）
挿入技法：教育＋ラベリング（「変わりたい人」定義）

【Step3. 問題提起】
目的："やっているつもり"を否定し、ズレを突く
構文：PREP構文（主張→理由→例→再主張）
挿入技法：興味付け（疑問導入）＋教育（誤解の指摘）＋ラベリング（「頑張り屋ほど…」）

【Step4. 原因の特定】
目的：構造的な敗因、順序のズレを明確化
構文：Why-Why分析構文
挿入技法：教育（構造暴き）＋ラベリング（○○型の人）

【Step5. 解決策の原理提示】
目的：努力ではなく"構造"で解決できることを提示
構文：Framework構文（MAP→説明→事例）
挿入技法：教育（方向修正）＋興味付け（「たった1つの順番」）

【Step6. 解決策の証明（ストーリー）】
目的：信頼性と共感の獲得
構文：ストーリー構文（Before→苦悩→きっかけ→変化→今）
挿入技法：共感（恥・葛藤）＋教育（気づき）＋ラベリング（○○な自分だった）

【Step7. 商品説明（構成とベネフィット）】
目的："できそう"と感じさせる
形式：✔️チェックリスト＋下にベネフィット解説
構文：FAB構文（特徴→利点→恩恵）
挿入技法：教育（ノウハウとの違い）＋興味付け（意外な使い方）

【Step8. 得られる未来 vs 失う未来（二極化）】
目的：選択の分岐点に立たせ、比較で決意を促す
構文：コントラスト構文（未来A vs 未来B）
挿入技法：教育（時間コスト）＋ラベリング（選べる人）

【Step9. 特典の提示（保険）】
目的：行動ハードルを下げ、不安を除去
構文：保険訴求構文（"もし不安でも大丈夫"）
挿入技法：教育（初心者のつまずきポイント）＋興味付け（「ここまで付けるのは初」）

【Step10. 価格提示とアンカリング】
目的：価格よりも価値に意識を移させる
構文：アンカリング構文（過去→現在→未来）
挿入技法：教育（価格の内訳・構成）＋興味付け（1日〇円、他講座との比較）

【Step11. 行動の後押し（緊急性・限定性）】
目的："今動く意味"と"今動かない損"を明確に
構文：希少性＋損失回避構文
挿入技法：興味付け（限定／期限）＋ラベリング（「動ける人が変わる」）

【Step12. クロージング（信念・ラストメッセージ）】
目的：理念・共感・決意を訴求し、信頼で締める
構文：パーソナル信念構文（過去→決意→未来）
挿入技法：教育（想いの理由）＋名言・余白・反語

# 追加指示

- 少し軽めの大人の口調で、「ですます調」を基本として「体言止め」を時々使ってリズムを出し、各セクションに一回以上口語表現を使って親近感と人間味を出してください。
- 1ステップにつき500ワード程度のボリュームにしてください。
- ユーザー入力を基に、ターゲットに刺さる言語を設計してください。

# 出力フォーマット:

---

【Step1｜タイトル・ヘッドコピー】
【目的】：注意を引きつけ、読了率を最大化

【構文】：QUEST構文

【挿入】：興味付け（ズレ／数字／問い）

- 出力文（500ワード程度）

---

【Step2｜理想の未来（爆撃）】
【目的】：感情ベネフィットを3段階で訴求

【構文】：AIDMA構文（Desire重点）

【挿入】：教育＋ラベリング

- 出力文（500ワード程度）

…

（※以下、Step12まで同様）

---

# 参考情報：

## 教育、興味付け、ラベリングとは

---

### ■ 教育11分類テンプレ

【信用の教育】

なぜこの人の言葉は信じられるのか

→ 経験や実績、小さな成功の共有

【理想の教育】

読者がまだ気づいていない未来の提示

→ 「こんな自分になれたらどうだろう？」

【問題点の教育】

潜在的な課題・ズレの指摘

→ 「その頑張り、どこに向かってる？」

【解決策の教育】

解決の方向性・ロジックの示唆

→ 「この構造で考えると整理しやすい」

【再現性の教育】

自分にもできる感覚を持たせる

→ 「これは誰でも真似できるステップだ」

【投資の教育】

時間・お金・リスクの納得化

→ 「迷ってる時間が一番コスト高だったりする」

【行動の教育】

小さな行動へと導く

→ 「まずは1通だけメッセージ送ってみよう」

【言語の教育】

抽象語の再定義

→ 「継続って"習慣になるまでの設計"のことだ」

【前提の教育】

読者の常識をほぐす

→ 「成功＝お金、って本当にそう？」

【思考フレームの教育】

考え方そのものを提示

→ 「まず"逆算"で捉えてみると…」

【感情の教育】

恐怖（損失回避）・安心（安全基地）・期待（希望）・共感（理解）・怒り/不満（転化）・自己肯定（救済）などの感情に訴えかける

→ 「"気づかないまま"損をしているかも」

---

興味付けテンプレ10型（要約）

1. 逆説／常識破壊（例：「努力すれば報われる」そう思ってた。でも…）
2. 疑問／引っかけ（例：「本当にそれでいいんですか？」）
3. 感情ゆさぶり（例：「悔しくて眠れなかった」）
4. ズレ・違和感（例：「インプは伸びた。でも売れない」）
5. 短期的快楽（例：「3日で売上が2倍に」）
6. 抽象ワード＋問い（例：「自由ってなんだろう？」）
7. 体験／やらかし（例：「最初は失敗だらけでした」）
8. 怒り／醒めた視点（例：「好きなことで生きろ？ それ、雑すぎ」）
9. 共感・救済（例：「怖くても、大丈夫です」）
10. ビジュアル／余白（例：「深夜のコンビニ。1人きりの帰り道」）

---

興味付け10の型

1｜逆説／常識破壊テンプレ

🔹【共感】→ よくある前提・常識をまず認める🔹【逆説提示】→ 「でも、それは違うかも」と一言でズラす🔹【理由説明】→ なぜ常識がズレているのかを論理で説明🔹【新しい前提】→ じゃあどう考えればいいか？を再定義する🔹【行動提案】→ 新しい視点を踏まえた小さなアクションを促す

2｜疑問／引っかけテンプレ

🔹【共感】→ 読者が抱えてるあるある問題を書く🔹【疑問提示】→ 「本当にそれでいいんですか？」と問いを投げる🔹【誤解を否定】→ よくある間違いをやさしく否定🔹【本質提示】→ それじゃなくて「本当の原因はこれだよ」と示す🔹【行動提案】→ すぐできる具体的な一歩を提案

3｜感情ゆさぶりテンプレ

🔹【痛みの共有】→ 読者が抱える苦しさや悩みを代弁🔹【エモーショナルな一言】→ 感情に直接刺さる短文を置く🔹【葛藤の描写】→ 具体的な場面や心の揺れを描く🔹【転機の提示】→ そこからどう乗り越えたかの一歩目を見せる🔹【優しい行動提案】→ 小さな勇気が湧くアクションを促す

4｜ズレ・違和感テンプレ

🔹【一見よさげな現象提示】→ インプ伸びた、いいね増えた、など🔹【でも…の違和感】→ 「でもなぜか売れない」などモヤモヤ提示🔹【違和感の原因分析】→ どこにズレがあったかを冷静に説明🔹【解決の視点】→ こう直せばいいよ、という再設計の提案🔹【行動提案】→ 今すぐできるズレ修正アクション

5｜短期的快楽テンプレ

🔹【短期成果のチラ見せ】→ 「これで即〇〇できた」体験を書く🔹【なぜそんなに早く？】→ コツや考え方をコンパクトに解説🔹【誰でもできる感】→ 難しそうに見せず、ハードルを下げる🔹【再現性提示】→ 誰でも試せるアレンジや応用を紹介🔹【今すぐ提案】→ 今日からできる一歩を押す

6｜抽象ワード＋問い型テンプレ

🔹【共感するシーン提示】→ 挑戦、迷い、不安などの感情描写🔹【抽象ワード＋問い】→ 「自由って、なんだろう？」みたいに投げる🔹【自分なりの小さな仮説】→ 軽くヒントを置く（押しつけない）🔹【さらに問い返す】→ 読者に考えさせる余白で閉じる

7｜体験／やらかしテンプレ

🔹【過去の失敗告白】→ 失敗エピソードを赤裸々に🔹【当時の気持ち描写】→ 「めちゃくちゃ悔しかった」など感情を込める🔹【そこからの学び】→ なにに気づいて、どう変えたかを書く🔹【今だから言えること】→ 失敗があったから今がある、を伝える🔹【行動提案】→ 同じ間違いをしないためのアドバイス

8｜怒り／醒めた視点テンプレ

🔹【世の中の風潮を提示】→ 例：「好きなことで生きろ！」みたいな一般論🔹【醒めた違和感提示】→ 「でもそれ、雑すぎない？」と一言で切る🔹【冷静な問題提起】→ なぜそれではダメなのか論理的に指摘🔹【じゃあどうする？提示】→ 現実的な代案・視点転換を示す🔹【行動提案】→ 具体的な新しい道を提案

9｜共感・救済テンプレ

🔹【読者の悩みを代弁】→ 怖い、迷ってる、動けないなど素直に描写🔹【100％受け止め】→ 「それでいいんです」と優しく肯定🔹【小さな希望の灯し】→ 無理な行動じゃなく、小さな救いを示す🔹【選択肢の提示】→ 「変わってもいい、変わらなくてもいい」と安心を与える🔹【小さな一歩提案】→ 自分を責めない、などできることを提案

10｜ビジュアル／余白テンプレ

## 🔹【シーンの切り取り】→ 深夜、空っぽの部屋、冷めたコーヒーなど🔹【感情を説明しない】→ ただ情景だけを置く🔹【行動や気づきのきっかけ描写】→ 「この景色を忘れないと決めた」など🔹【余白で終わる】→ 読者に情緒を委ねるラストにする

ラベリング種別	内容例	効果
現在地褒め	「この文章を読んでいる時点で、あなたは相当感度が高いです」	今の行動を肯定し、読者の姿勢を強化する
具体褒め	「○○に反応する人って、本当に○○が優れてるんです」	読者の特性をピンポイントで肯定する
ポテンシャル褒め	「本当は○○なのに○○しないなんてもったいないです」	期待と希望を暗示する
所属褒め	「この発信に共感する人、ほんといい人が多い」	"選ばれたコミュニティ感"を付与する
先回り褒め	「いつも丁寧な感想を書いてもらえて嬉しいです」	読者にしてほしい行動を先に褒める
決めつけ褒め	「そういう情報に反応できるって、意志が強い証拠です」	断言によってセルフイメージを上書きする
比較褒め	「○○な人って結果出ないんですよ。でも私のフォロワーさんは」	仮想敵との差を強調し優越感を演出する

---`;
    case 'short_lp':
      return `${inputContext}\n\n上記の無料プレゼント内容から、メール登録を促す短尺LPを作成してください。構成：1.キャッチコピー 2.サブキャッチ 3.ベネフィット 4.プレゼント紹介 5.登録導線`;
    case 'education_posts':
      return `あなたはSNS上で心理的リードを獲得する教育ポストの専門家です。

以下の無料プレゼントをもとに、**読者の関心を高め、noteへと誘導する予告ポストを**長文で**9本**作成してください。

【前提】
・投稿媒体：X（旧Twitter）ですが、文字数制限は考慮不要です。
・目的：3日間連続投稿による連続ストーリー型の予告ポスト。
・構成：DAY1（問題提起）→ DAY2（共感・期待）→ DAY3（公開直前の案内）というストーリー構造。
・1日あたり3ポスト、合計9ポスト構成。

【条件】
・各ポストは**500〜2000字の長文**で、**起承転結のある読み物**として独立して成立すること。
・**コピー調の短文や箇条書きではなく、ストーリーやエッセイのような文体**で書くこと。
・各ポストの構造は「導入→背景→気づき→読者への問いかけ」など、自然な文章構成で展開すること。
・できるだけ「書き手の語り」が感じられる文体で書くこと（講座を届けたいという熱量を込めて）。
・出力は1日分ずつ（3ポストずつ）分割してもよい。

参照ナレッジ：読まれる長文ポストの奥義

# ナレッジ

# 読まれる長文ポストの奥義

# フック設計

【Xにおけるタップ率最大化のための冒頭文戦略】
■ ポイント①：「この投稿、まさに自分に向けられてる」と思わせるターゲット明示型導入
・例：「副業で結果出なくて焦ってる人、100％〇〇がズレてます」
・例：「何度もnoteで挫折した人、〇〇を知らなすぎる」
・"これは自分のことだ"と思わせた瞬間、タップ率は倍増する

■ ポイント②：「広告コピー」的視点で読む手を止めさせる
・スワイプ中の"視界に飛び込む文字列"として強い単語選定
・例：「〇〇な人、100％損してます」「実は誰も言わない話」
・Twitterは文章媒体であると同時に"視覚媒体"でもある

■ ポイント③：抽象ではなく、具体で撃つ
・抽象：「文章力が低いと…」→弱い
・具体：「毎日書いてるのに、1ミリも反応されない文章には共通点がある」→強い
・読者の脳内映像が明確に浮かぶほど、引き込まれやすい

■ ポイント④：「損失」や「無自覚」を刺す
・例：「ほとんどの人が気づいてないけど…」「気づかずに損してる人、多すぎる」
・"読んで得"ではなく、"読まないと損"で誘導する方が強い
・心理学的に、利益獲得より損失回避の方が行動を促す（プロスペクト理論）

■ ポイント⑤：「自分だけが知らない？」という不安を煽る
・例：「これ、知らない人は普通にヤバいです」
・例：「実は全員やってるのに、自分だけがやってない施策」
・読者の中に「何それ…知らない…気になる…」という心理が生まれたら勝ち

■ ポイント⑥：「限定性」「希少性」「具体数値」
・例：「1日10分で完了する、反応率が爆上がりした施策」
・例：「これ、10人中9人はやってないです」
・人は"レアな数字"と"誰もやってない"に弱い

■ ポイント⑦：「N=1」で書く
・"万人向け"ではなく"1人のリアルな行動"を想定する
・例：「3ヶ月毎日note書いたけど、1件も反応が来なかった僕が…」
・その1人にガチ刺さりすれば、逆に広く拡散される

この冒頭文の戦略を一文で要約するとすれば：

→「"これは私のことだ"と思わせ、"続きを読まないと損する"と感じさせる一文」

# 再評価されるポスト設計

【再評価されるポスト＝"読み捨て"されず、何度も保存・引用・共有されるポスト】
■ 1. 長文である（500〜2000文字）
・中途半端な情報密度だと"読んだ気"にならず、記憶にも残らない
・ある程度"読み応え"があることで「後で見返そう」が発動する
・完成ポストは最低でも500文字以上、推奨1500文字以上の"読み応え"を備えること
・短文化された場合は「情報密度不足」と見なし、再生成する

■ 2. 途中で情報を"切る"
・すべてを言い切らない
・例：「実はこの3つの視点を変えるだけで、文章は反応されるようになります。でも、今日は1つ目だけ話します」
・＝次ポストへの導線にもなる

■ 3. ストーリー構造になっている
・人は「物語」に引き込まれる
・例：「反応ゼロで悩んでた僕が、ある1つの考え方に出会って…」
・過去→気づき→変化→今の視点 という流れが理想

■ 4. 抽象⇄具体が往復している
・抽象で「なるほど」と納得させ、具体で「自分ごと化」させる
・具体しかない＝他人事になる
・抽象しかない＝ふわっとする

■ 5. 感情を揺らしている
・共感／焦り／安心／怒り／希望 など
・読み終わったあとに"感情が動いている状態"が理想

■ 6. 「構造で納得」→「感情で保存」
・内容に納得してもらい、感情で動かす
・例：「自分もこうだったな…」「これは友達に教えたいかも」「いつか必要になるかも」＝保存される

■ 7. 「答えを与える」のではなく「問いを残す」
・本文では情報と感情を設計し、結論部分では『問いを残す』構造に切り替える
・読後に"考えたくなる問い"が残ると、人はそのポストを忘れない
・例：「結局、自分は誰に何を届けたいのか？」

■ 8. 最後の一文が、また強い
・オチが弱いと印象が薄れる
・最後の一文で"思考"を止めず、"余韻"を残す

そして、最後に：

「今日の内容は、あとで見返せるように保存しておいてください。」

この一文を自然に差し込むことで、"保存率"は劇的に変わる。

# 初期エンゲージメントを獲得する技術

【投稿直後30分で"反応される投稿"を作る技術】
■ なぜ初動が重要なのか？
・X（旧Twitter）のアルゴリズムは「投稿直後の反応率」で"表示範囲"を判定する
・ここで反応が得られない投稿は、その後も伸びにくい

■ 反応されるには"仕掛け"が必要
読者にとって：

「いいね」も「保存」も「リプ」も、全て"面倒くさい行動"である

よって、反応させるには：

「押す理由」

「押してもいいという心理」

「押したくなる言葉」

が必要。

■ 代表的な仕掛け：5カテゴリ
①【問いかけ型】

・例：「知ってた？」「これ、自分だけかもだけど…」「自分も昔そうだった人いますか？」

→ 読者に"脳内で答えさせる"構造
→ 無意識に自分の中で答えた瞬間＝反応するきっかけになる

②【診断／チェックリスト型】

・例：「3つ当てはまったら危険」「全部できてるならOKです」
・人は「自分がどこに当てはまるか？」を知りたくなる

③【感情共有型】

・例：「自分もかつてそうだった。だから今日の話は昔の自分に届けるつもりで書いてます」
・人は"過去の自分と同じ人"に出会うと、思わず反応したくなる

④【保存誘導型】

・例：「これは保存して後から見返す価値あります」
・「保存＝便利」という認知は意外と一般的ではない
・→ "保存していい"という許可を与えると保存率が上がる

⑤【引用・リプ促進型】

・例：「自分なりの視点がある人は、ぜひ引用して意見を聞かせてほしい」
・「分かる…って人、リプでそっと教えて」
・"正解を求める"のではなく、"共感でつながれる場所"として設計

【補足】
押し付けがましい「お願い」は逆効果

重要なのは「読者の中に反応理由を発生させること」

${inputContext}`;
    case 'campaign_post':
      return `あなたはSNS上で無料企画を「価値あるもの」として見せるコピークリエイターです。

以下の無料プレゼントに基づき、「note公開・無料配布キャンペーンの告知ポスト」を作成してください。

---

【構成】
1. 興味を引く一文（問い・数字・逆説など）
2. なぜこのコンテンツを作ったのか（制作者の想い）
3. 中身の一部チラ見せ（全部は出さない）
4. 誰にとって価値があるか（対象明記）
5. 受け取り方法（LPリンク・登録説明など）

---

【トーン】
- 誠実・率直・自信あり
- SNSで"推したくなる空気感"

▼無料プレゼント原稿：
${inputContext}`;
    case 'repost_bonus':
      return `あなたはSNSでの自然なUGC（ユーザー発信）拡散を誘発する、拡張コンテンツの専門家です。

以下の無料プレゼントに連動し、**リポストすることで受け取れる特典**を1つ設計・執筆してください。

---

【条件】
- 本編の延長線にある内容（補完的 or 拡張的）
- 例：
　・チェックリスト化（実践化を支援）
　・作成裏話（信頼と興味）
　・ワークシート（自己適用を促す）
　・限定Q&A（noteでは書けなかったこと）

【目的】
- 拡散インセンティブでありつつ、内容単体でも価値があること

【トーン】
- 軽くて「特別感」がある語り口
- note本文と連動していることが伝わるように

▼note本文：
${inputContext}`;
    case 'webinar_script':
      return `あなたは教育型ウェビナー構成と心理的クロージングに長けたスクリプト構築者です。

以下のnoteコンテンツをもとに、**30分想定のウェビナースクリプト**を作成してください。

---

【構成テンプレ】
1. オープニング（共感・問い）
2. 問題の再定義（誤解解消）
3. コアアイデアの紹介（図やフレームOK）
4. 事例・視点の転換（自分にもできそう感）
5. 行動喚起と商品導線（自然に興味を持たせる）

---

【トーン】
- 一人語り風、問いかけを頻出
- 感情と論理の緩急を意識
- テキスト読解より「聴きながら理解できる」構造

▼note内容：
${inputContext}`;
    case 'webinar_slides':
      return `上記のウェビナースクリプトに対応するスライド用文章を作成してください。

---

【ルール】
- 1スライド1主張  
- タイトルとサブ文の構成  
- 視覚的に捉えやすい言葉（箇条書き・対比・図解誘導語）

【目的】
- 話す内容を視覚的に補完すること
- スクリプトと違って、視覚処理に特化したコピーで構成すること

【トーン】
- シンプル・明快・整然とした表現
- 質問、選択肢、対比などを多用して認知負荷を下げる

▼ウェビナースクリプト：
${inputContext}`;
    case 'long_lp':
      return `あなたは構造化コピー・視覚設計・行動心理学に長けたランディングページ制作の専門家です。

以下のセールスレターを素材として、**1ページで読者のスクロールを止めず、納得し、購入を決意する「構造的な販売LP（長尺）」**を作成してください。

---

【目的】
- スキャン読み／視覚的な理解／流れるような説得構造に最適化する
- 単なる要約やコピーではなく、「感情と構造を再配置」したリデザイン

---

【構成テンプレ（全10セクション）】

1. **キャッチコピー**  
　・問題提起 or 逆説型（見出しとして強く）  
2. **ファーストビュー**  
　・読者の状態＋変化の予感＋登録導線  
3. **現状の悩み（共感セクション）**  
　・「なぜこれが解決されないのか」も含める  
4. **理想の未来**  
　・ビジュアライズされた変化後のイメージ  
5. **ギャップ可視化 → 商品登場**  
　・「その間を埋めるものがある」として商品提示  
6. **商品特徴・中身・構造紹介**  
　・要点化／アイコン表現前提で箇条書き設計  
7. **実績・権威性・声**  
　・第三者視点の安心感と期待形成  
8. **価格・比較・特典**  
　・「得られる価値＞価格」の構造  
9. **保証・FAQ・安心材料**  
　・「やらない理由を消す」セクション  
10. **クロージングCTA**  
　・再度ベネフィット＋行動トリガー＋限定性や締切

---

【注意点】
- 見出し＋サブ見出しで構造化（読者は「流し読み」する前提）
- 各セクションは目的に応じた構文を活用（例：対比構文、SDS、エモCTA、FAQ構文）

▼セールスレター本文：
${inputContext}`;
    case 'step_mails':
      return `あなたは行動心理 × 教育型セールスメールにおけるトッププロフェッショナルです。

以下のセールスレターを素材として、**ステップメール7通**を「教育→信頼→説得→決断」の心理構造に基づき再構成してください。

---

【原則】
- 各通が独立した価値と変化誘導を持つ「単位としての説得装置」
- セールスレターの内容をただ分割するのではなく、「読者の状態変化」に合わせて再設計する

---

【構成ガイド（7通）】

1通目｜登録直後：感謝＋無料プレゼント案内＋「なぜこれを送ったのか」の意図
2通目｜30分後：未読リマインド＋「一部だけ見せる」戦略（断片チラ見せ）
3通目｜1日後昼：変化の時間性（72時間ルール・行動のタイミング）への気づき
4通目｜1日後夜：他者の事例や再現性（「他人にもできた」がわかる）
5通目｜2日後昼：投資の捉え方（価格ではなく可能性と未来の価値）
6通目｜2日後夜：よくある不安や疑問（FAQ構成）への反論と納得
7通目｜2日後深夜：ラストメッセージ（時間・感情・行動を束ねたクロージング）

---

【構文活用】
- PASONA, AIDA, 逆説構文, Q&A構文, エモーショナルCTA などを各通に戦略的に配置
- CTAは毎通あるが、トーンと導線は変える

【補足】
- トーン：親しみ＋知的＋フラットな語り（過度な売り込みは禁止）
- 各通ごとに「タイトル」＋「本文」を明示的に分けてください

▼セールスレター本文：
${inputContext}`;
    case 'vsl_script':
      return `あなたは動画セールス（VSL）のスクリプト設計・脚本構成におけるトップディレクターです。

以下のセールスレターを素材として、**3〜5分のVSL（Video Sales Letter）用のスクリプト**を作成してください。

---

【目的】
- 書き言葉ベースのセールスレターを、**感情・抑揚・間・語りかけ**を活用して"動画で伝わる構成"に変換する

---

【構成テンプレ】

1. オープニング（驚き・逆説・強い問い）
2. 共感（あなたも同じでは？）
3. 問題の再定義
4. 解決策の存在（商品）
5. 商品のベネフィット（ストーリー調に語る）
6. 実績・再現性（「他人にもできた」流れ）
7. クロージングと行動喚起

---

【話し方設計】
- 全編を通して"読み上げられる前提"で構成すること
- 感情トーン（怒り・迷い・静けさ・高揚）を**カッコやタグで演出**してもOK
- 一文は長くしすぎず、話すテンポで切る

▼セールスレター本文：
${inputContext}`;
    case 'vsl_slides':
      return `あなたはVSL（動画セールスレター）とナレーションの動線を一致させる、映像×言語設計のスペシャリストです。

以下のVSLスクリプトに合わせて、**各パートに対応するスライド文（視覚で伝わるコピー）**を作成してください。

---

【スライド設計ガイド】

- 各スライド = 1つの主張（1行 or 2行まで）
- 単語の強調／疑問形／リズムを意識した配置
- 話していることの要約や補足ではなく、**「視覚的に補完する要素」**として設計

---

【言語処理の工夫】
- 見出し＋補助テキスト形式でもOK
- 箇条書き／対比／図示したくなる文にする

▼VSLスクリプト：
${inputContext}`;
    default:
      return `${inputContext}\n\n上記の情報から、${contentType}を作成してください。`;
  }
}

function getTitleForContentType(contentType: string): string {
  const titles = {
    'free_content': '無料プレゼント',
    'sales_letter': 'セールスレター',
    'short_lp': 'リストイン用短LP',
    'education_posts': '教育ポスト',
    'campaign_post': '企画ポスト',
    'long_lp': '商品販売用LP',
    'step_mails': 'ステップメール',
    'repost_bonus': 'リポスト特典',
    'webinar_script': 'ウェビナー台本',
    'webinar_slides': 'ウェビナースライド',
    'vsl_script': 'VSL台本',
    'vsl_slides': 'VSLスライド'
  };
  return titles[contentType] || contentType;
}